using System;
using System.Collections.Generic;
using System.Linq;
using Cloudtoid.GatewayCore.Headers;

namespace Cloudtoid.GatewayCore.Settings
{
    public sealed class UpstreamRequestHeadersSettings
    {
        internal UpstreamRequestHeadersSettings(
            bool discardInboundHeaders,
            bool discardEmpty,
            bool discardUnderscore,
            bool addExternalAddress,
            bool addProxyName,
            bool skipVia,
            bool skipForwarded,
            IReadOnlyDictionary<string, HeaderSettings> appends,
            IReadOnlyDictionary<string, HeaderSettings> overrides,
            ISet<string> discards)
        {
            DiscardEmpty = discardEmpty;
            DiscardUnderscore = discardUnderscore;
            AddExternalAddress = addExternalAddress;
            AddProxyName = addProxyName;
            DiscardInboundHeaders = discardInboundHeaders;
            SkipVia = skipVia;
            SkipForwarded = skipForwarded;
            Appends = appends;
            Overrides = overrides;
            Discards = discards;

            DoNotTransferHeaders = HeaderTypes
                .DoNotTransferRequestHeaders
                .Concat(Overrides.Keys)
                .Concat(Discards)
                .ToHashSet(StringComparer.OrdinalIgnoreCase);
        }

        /// <summary>
        /// This is a list of headers that should not be passed on to the upstream system as they are.
        /// They can be transferred, but only when they are transformed. This set consists of
        /// <list type="bullet">
        /// <item>Headers generated by an instance of this proxy</item>
        /// <item><a href="https://datatracker.ietf.org/doc/html/rfc7540#section-8.1.2.3">HTTP/2 pseudo headers</a>.</item>
        /// <item>Standard hop-by-hop headers. See <see cref="HeaderTypes.StandardHopByHopeHeaders"/>.</item>
        /// <item><see cref="Overrides"/> headers.</item>
        /// <item><see cref="Discards"/> headers.</item>
        /// </list>
        /// </summary>
        public ISet<string> DoNotTransferHeaders { get; }

        public bool DiscardInboundHeaders { get; }

        public bool DiscardEmpty { get; }

        public bool DiscardUnderscore { get; }

        public bool AddExternalAddress { get; }

        public bool AddProxyName { get; }

        public bool SkipVia { get; }

        public bool SkipForwarded { get; }

        public IReadOnlyDictionary<string, HeaderSettings> Appends { get; }

        public IReadOnlyDictionary<string, HeaderSettings> Overrides { get; }

        public ISet<string> Discards { get; }
    }
}